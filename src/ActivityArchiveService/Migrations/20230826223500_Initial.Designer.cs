// <auto-generated />
using System;
using ActivityArchiveService.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ActivityArchiveService.Migrations
{
    [DbContext(typeof(ActivityArchiveContext))]
    [Migration("20230826223500_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ActivityArchiveService.Database.Entities.Activity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("ActivityType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("activity_type");

                    b.Property<string>("ApplicationId")
                        .HasColumnType("text")
                        .HasColumnName("application_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Details")
                        .HasColumnType("text")
                        .HasColumnName("details");

                    b.Property<DateTime?>("End")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end");

                    b.Property<string>("LargeImage")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("large_image");

                    b.Property<string>("LargeImageText")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("large_image_text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Party")
                        .HasColumnType("text")
                        .HasColumnName("party");

                    b.Property<Guid>("PresenceId")
                        .HasColumnType("uuid")
                        .HasColumnName("presence_id");

                    b.Property<string>("SmallImage")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("small_image");

                    b.Property<string>("SmallImageText")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("small_image_text");

                    b.Property<DateTime?>("Start")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start");

                    b.Property<string>("State")
                        .HasColumnType("text")
                        .HasColumnName("state");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_activities");

                    b.HasIndex("PresenceId")
                        .HasDatabaseName("ix_activities_presence_id");

                    b.ToTable("activities", (string)null);
                });

            modelBuilder.Entity("ActivityArchiveService.Database.Entities.Channel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int?>("BitRate")
                        .HasColumnType("integer")
                        .HasColumnName("bit_rate");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<decimal>("DiscordId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("discord_id");

                    b.Property<Guid?>("GuildId")
                        .HasColumnType("uuid")
                        .HasColumnName("guild_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<Guid?>("ParentChannelId")
                        .HasColumnType("uuid")
                        .HasColumnName("parent_channel_id");

                    b.Property<string>("RtcRegion")
                        .HasColumnType("text")
                        .HasColumnName("rtc_region");

                    b.Property<string>("Topic")
                        .HasColumnType("text")
                        .HasColumnName("topic");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<int?>("UserLimit")
                        .HasColumnType("integer")
                        .HasColumnName("user_limit");

                    b.HasKey("Id")
                        .HasName("pk_channels");

                    b.HasIndex("GuildId")
                        .HasDatabaseName("ix_channels_guild_id");

                    b.HasIndex("ParentChannelId")
                        .HasDatabaseName("ix_channels_parent_channel_id");

                    b.ToTable("channels", (string)null);
                });

            modelBuilder.Entity("ActivityArchiveService.Database.Entities.Emote", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<decimal>("DiscordId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("discord_id");

                    b.Property<bool>("IsAnimated")
                        .HasColumnType("boolean")
                        .HasColumnName("is_animated");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("Url")
                        .HasColumnType("text")
                        .HasColumnName("url");

                    b.HasKey("Id")
                        .HasName("pk_emotes");

                    b.ToTable("emotes", (string)null);
                });

            modelBuilder.Entity("ActivityArchiveService.Database.Entities.Guild", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<decimal>("DiscordId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("discord_id");

                    b.Property<string>("IconUrl")
                        .HasColumnType("text")
                        .HasColumnName("icon_url");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid")
                        .HasColumnName("owner_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_guilds");

                    b.HasIndex("OwnerId")
                        .HasDatabaseName("ix_guilds_owner_id");

                    b.ToTable("guilds", (string)null);
                });

            modelBuilder.Entity("ActivityArchiveService.Database.Entities.GuildMember", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("text")
                        .HasColumnName("avatar_url");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<Guid>("GuildId")
                        .HasColumnType("uuid")
                        .HasColumnName("guild_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("username");

                    b.HasKey("Id")
                        .HasName("pk_guild_members");

                    b.HasIndex("GuildId")
                        .HasDatabaseName("ix_guild_members_guild_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_guild_members_user_id");

                    b.ToTable("guild_members", (string)null);
                });

            modelBuilder.Entity("ActivityArchiveService.Database.Entities.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uuid")
                        .HasColumnName("author_id");

                    b.Property<Guid>("ChannelId")
                        .HasColumnType("uuid")
                        .HasColumnName("channel_id");

                    b.Property<string>("Content")
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<decimal>("DiscordId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("discord_id");

                    b.Property<DateTime>("DiscordTimestamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("discord_timestamp");

                    b.Property<bool>("HasAttatchment")
                        .HasColumnType("boolean")
                        .HasColumnName("has_attatchment");

                    b.Property<bool>("IsEdited")
                        .HasColumnType("boolean")
                        .HasColumnName("is_edited");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("boolean")
                        .HasColumnName("is_removed");

                    b.Property<Guid?>("ReplyToMessageId")
                        .HasColumnType("uuid")
                        .HasColumnName("reply_to_message_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_messages");

                    b.HasIndex("AuthorId")
                        .HasDatabaseName("ix_messages_author_id");

                    b.HasIndex("ChannelId")
                        .HasDatabaseName("ix_messages_channel_id");

                    b.HasIndex("ReplyToMessageId")
                        .HasDatabaseName("ix_messages_reply_to_message_id");

                    b.ToTable("messages", (string)null);
                });

            modelBuilder.Entity("ActivityArchiveService.Database.Entities.MessageContentEdit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<string>("ContentBefore")
                        .HasColumnType("text")
                        .HasColumnName("content_before");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("boolean")
                        .HasColumnName("is_removed");

                    b.Property<Guid>("MessageId")
                        .HasColumnType("uuid")
                        .HasColumnName("message_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_message_content_edits");

                    b.HasIndex("MessageId")
                        .HasDatabaseName("ix_message_content_edits_message_id");

                    b.ToTable("message_content_edits", (string)null);
                });

            modelBuilder.Entity("ActivityArchiveService.Database.Entities.PresenceStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("AfterId")
                        .HasColumnType("uuid")
                        .HasColumnName("after_id");

                    b.Property<Guid>("BeforeId")
                        .HasColumnType("uuid")
                        .HasColumnName("before_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_presence_statuses");

                    b.HasIndex("AfterId")
                        .HasDatabaseName("ix_presence_statuses_after_id");

                    b.HasIndex("BeforeId")
                        .HasDatabaseName("ix_presence_statuses_before_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_presence_statuses_user_id");

                    b.ToTable("presence_statuses", (string)null);
                });

            modelBuilder.Entity("ActivityArchiveService.Database.Entities.PresenceStatusDetails", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("DesktopStatus")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("desktop_status");

                    b.Property<string>("MobileStatus")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("mobile_status");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("WebStatus")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("web_status");

                    b.HasKey("Id")
                        .HasName("pk_presence_status_details");

                    b.ToTable("presence_status_details", (string)null);
                });

            modelBuilder.Entity("ActivityArchiveService.Database.Entities.Reaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<Guid>("EmoteId")
                        .HasColumnType("uuid")
                        .HasColumnName("emote_id");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("boolean")
                        .HasColumnName("is_removed");

                    b.Property<Guid>("MessageId")
                        .HasColumnType("uuid")
                        .HasColumnName("message_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_reactions");

                    b.HasIndex("EmoteId")
                        .HasDatabaseName("ix_reactions_emote_id");

                    b.HasIndex("MessageId")
                        .HasDatabaseName("ix_reactions_message_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_reactions_user_id");

                    b.ToTable("reactions", (string)null);
                });

            modelBuilder.Entity("ActivityArchiveService.Database.Entities.TypingStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("ChannelId")
                        .HasColumnType("uuid")
                        .HasColumnName("channel_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_typing_statuses");

                    b.HasIndex("ChannelId")
                        .HasDatabaseName("ix_typing_statuses_channel_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_typing_statuses_user_id");

                    b.ToTable("typing_statuses", (string)null);
                });

            modelBuilder.Entity("ActivityArchiveService.Database.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("text")
                        .HasColumnName("avatar_url");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<decimal>("DiscordId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("discord_id");

                    b.Property<string>("Discriminator")
                        .HasColumnType("text")
                        .HasColumnName("discriminator");

                    b.Property<bool>("IsBot")
                        .HasColumnType("boolean")
                        .HasColumnName("is_bot");

                    b.Property<bool>("IsWebhook")
                        .HasColumnType("boolean")
                        .HasColumnName("is_webhook");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("username");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("ActivityArchiveService.Database.Entities.VoiceStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("AfterId")
                        .HasColumnType("uuid")
                        .HasColumnName("after_id");

                    b.Property<Guid>("BeforeId")
                        .HasColumnType("uuid")
                        .HasColumnName("before_id");

                    b.Property<Guid>("ChannelId")
                        .HasColumnType("uuid")
                        .HasColumnName("channel_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_voice_statuses");

                    b.HasIndex("AfterId")
                        .HasDatabaseName("ix_voice_statuses_after_id");

                    b.HasIndex("BeforeId")
                        .HasDatabaseName("ix_voice_statuses_before_id");

                    b.HasIndex("ChannelId")
                        .HasDatabaseName("ix_voice_statuses_channel_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_voice_statuses_user_id");

                    b.ToTable("voice_statuses", (string)null);
                });

            modelBuilder.Entity("ActivityArchiveService.Database.Entities.VoiceStatusDetails", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<bool>("IsSelfDeafened")
                        .HasColumnType("boolean")
                        .HasColumnName("is_self_deafened");

                    b.Property<bool>("IsSelfMuted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_self_muted");

                    b.Property<bool>("IsSelfStream")
                        .HasColumnType("boolean")
                        .HasColumnName("is_self_stream");

                    b.Property<bool>("IsSelfVideo")
                        .HasColumnType("boolean")
                        .HasColumnName("is_self_video");

                    b.Property<bool>("IsServerDeafened")
                        .HasColumnType("boolean")
                        .HasColumnName("is_server_deafened");

                    b.Property<bool>("IsServerMuted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_server_muted");

                    b.Property<bool>("IsSuppressed")
                        .HasColumnType("boolean")
                        .HasColumnName("is_suppressed");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_voice_status_details");

                    b.ToTable("voice_status_details", (string)null);
                });

            modelBuilder.Entity("ActivityArchiveService.Database.Entities.Activity", b =>
                {
                    b.HasOne("ActivityArchiveService.Database.Entities.PresenceStatusDetails", "Presence")
                        .WithMany("Activities")
                        .HasForeignKey("PresenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_activities_presence_status_details_presence_id");

                    b.Navigation("Presence");
                });

            modelBuilder.Entity("ActivityArchiveService.Database.Entities.Channel", b =>
                {
                    b.HasOne("ActivityArchiveService.Database.Entities.Guild", "Guild")
                        .WithMany("Channels")
                        .HasForeignKey("GuildId")
                        .HasConstraintName("fk_channels_guilds_guild_id");

                    b.HasOne("ActivityArchiveService.Database.Entities.Channel", "ParentChannel")
                        .WithMany()
                        .HasForeignKey("ParentChannelId")
                        .HasConstraintName("fk_channels_channels_parent_channel_id");

                    b.Navigation("Guild");

                    b.Navigation("ParentChannel");
                });

            modelBuilder.Entity("ActivityArchiveService.Database.Entities.Guild", b =>
                {
                    b.HasOne("ActivityArchiveService.Database.Entities.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_guilds_users_owner_id");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("ActivityArchiveService.Database.Entities.GuildMember", b =>
                {
                    b.HasOne("ActivityArchiveService.Database.Entities.Guild", "Guild")
                        .WithMany("Members")
                        .HasForeignKey("GuildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_guild_members_guilds_guild_id");

                    b.HasOne("ActivityArchiveService.Database.Entities.User", "User")
                        .WithMany("Guilds")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_guild_members_users_user_id");

                    b.Navigation("Guild");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ActivityArchiveService.Database.Entities.Message", b =>
                {
                    b.HasOne("ActivityArchiveService.Database.Entities.User", "Author")
                        .WithMany("Messages")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_messages_users_author_id");

                    b.HasOne("ActivityArchiveService.Database.Entities.Channel", "Channel")
                        .WithMany("Messages")
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_messages_channels_channel_id");

                    b.HasOne("ActivityArchiveService.Database.Entities.Message", "ReplyToMessage")
                        .WithMany()
                        .HasForeignKey("ReplyToMessageId")
                        .HasConstraintName("fk_messages_messages_reply_to_message_id");

                    b.Navigation("Author");

                    b.Navigation("Channel");

                    b.Navigation("ReplyToMessage");
                });

            modelBuilder.Entity("ActivityArchiveService.Database.Entities.MessageContentEdit", b =>
                {
                    b.HasOne("ActivityArchiveService.Database.Entities.Message", "Message")
                        .WithMany("ContentEdits")
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_message_content_edits_messages_message_id");

                    b.Navigation("Message");
                });

            modelBuilder.Entity("ActivityArchiveService.Database.Entities.PresenceStatus", b =>
                {
                    b.HasOne("ActivityArchiveService.Database.Entities.PresenceStatusDetails", "After")
                        .WithMany()
                        .HasForeignKey("AfterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_presence_statuses_presence_status_details_after_id");

                    b.HasOne("ActivityArchiveService.Database.Entities.PresenceStatusDetails", "Before")
                        .WithMany()
                        .HasForeignKey("BeforeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_presence_statuses_presence_status_details_before_id");

                    b.HasOne("ActivityArchiveService.Database.Entities.User", "User")
                        .WithMany("PresenceStatuses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_presence_statuses_users_user_id");

                    b.Navigation("After");

                    b.Navigation("Before");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ActivityArchiveService.Database.Entities.Reaction", b =>
                {
                    b.HasOne("ActivityArchiveService.Database.Entities.Emote", "Emote")
                        .WithMany("Reactions")
                        .HasForeignKey("EmoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_reactions_emotes_emote_id");

                    b.HasOne("ActivityArchiveService.Database.Entities.Message", "Message")
                        .WithMany("Reactions")
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_reactions_messages_message_id");

                    b.HasOne("ActivityArchiveService.Database.Entities.User", "User")
                        .WithMany("Reactions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_reactions_users_user_id");

                    b.Navigation("Emote");

                    b.Navigation("Message");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ActivityArchiveService.Database.Entities.TypingStatus", b =>
                {
                    b.HasOne("ActivityArchiveService.Database.Entities.Channel", "Channel")
                        .WithMany()
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_typing_statuses_channels_channel_id");

                    b.HasOne("ActivityArchiveService.Database.Entities.User", "User")
                        .WithMany("TypingStatuses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_typing_statuses_users_user_id");

                    b.Navigation("Channel");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ActivityArchiveService.Database.Entities.VoiceStatus", b =>
                {
                    b.HasOne("ActivityArchiveService.Database.Entities.VoiceStatusDetails", "After")
                        .WithMany()
                        .HasForeignKey("AfterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_voice_statuses_voice_status_details_after_id");

                    b.HasOne("ActivityArchiveService.Database.Entities.VoiceStatusDetails", "Before")
                        .WithMany()
                        .HasForeignKey("BeforeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_voice_statuses_voice_status_details_before_id");

                    b.HasOne("ActivityArchiveService.Database.Entities.Channel", "Channel")
                        .WithMany("VoiceStatuses")
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_voice_statuses_channels_channel_id");

                    b.HasOne("ActivityArchiveService.Database.Entities.User", "User")
                        .WithMany("VoiceStatuses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_voice_statuses_users_user_id");

                    b.Navigation("After");

                    b.Navigation("Before");

                    b.Navigation("Channel");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ActivityArchiveService.Database.Entities.Channel", b =>
                {
                    b.Navigation("Messages");

                    b.Navigation("VoiceStatuses");
                });

            modelBuilder.Entity("ActivityArchiveService.Database.Entities.Emote", b =>
                {
                    b.Navigation("Reactions");
                });

            modelBuilder.Entity("ActivityArchiveService.Database.Entities.Guild", b =>
                {
                    b.Navigation("Channels");

                    b.Navigation("Members");
                });

            modelBuilder.Entity("ActivityArchiveService.Database.Entities.Message", b =>
                {
                    b.Navigation("ContentEdits");

                    b.Navigation("Reactions");
                });

            modelBuilder.Entity("ActivityArchiveService.Database.Entities.PresenceStatusDetails", b =>
                {
                    b.Navigation("Activities");
                });

            modelBuilder.Entity("ActivityArchiveService.Database.Entities.User", b =>
                {
                    b.Navigation("Guilds");

                    b.Navigation("Messages");

                    b.Navigation("PresenceStatuses");

                    b.Navigation("Reactions");

                    b.Navigation("TypingStatuses");

                    b.Navigation("VoiceStatuses");
                });
#pragma warning restore 612, 618
        }
    }
}
