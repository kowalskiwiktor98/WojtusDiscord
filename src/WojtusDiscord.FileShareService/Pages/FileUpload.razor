@page "/upload"
@using Amazon
@using Amazon.Runtime
@using Amazon.S3
@using Amazon.S3.Model
@using Amazon.S3.Transfer
@inject IJSRuntime _jsRuntime

<PageTitle>Upload file</PageTitle>


<div class="justify-content-center">
    <h3 class="justify-content-center">FileUpload</h3>
</div>
@if (!isLoading && !isUploaded)
{
    <div class="file-upload">
        @*<button class="file-upload-btn" type="button" onclick="$('.file-upload-input').trigger( 'click' )">Add Image</button>*@

        <div class="image-upload-wrap">
            <InputFile OnChange="@OnFileUpload" class="file-upload-input" />
            <div class="drag-text">
                <h3>Drag and drop or select a file</h3>
            </div>
        </div>

        <div class="file-upload-content">
            @*<img class="file-upload-image" src="#" alt="your image" />*@
            <div class="image-title-wrap">
                <button type="button" onclick="removeUpload()" class="remove-image">Remove <span class="image-title">Uploaded Image</span></button>
            </div>
        </div>
    </div>
}

@if (isLoading)
{
    <div class="d-flex justify-content-center">
        <div class="spinner-border" role="status" style="width: 10rem; height: 10rem;">
            <span class="sr-only"></span>
        </div>
    </div>
}

@if (isUploaded)
{
    <div class="justify-content-center">
        <a href="@downloadLink">
            <button type="button" class="btn btn-primary justify-content-center">
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-download" viewBox="0 0 16 16">
                    <path d="M.5 9.9a.5.5 0 0 1 .5.5v2.5a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1v-2.5a.5.5 0 0 1 1 0v2.5a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2v-2.5a.5.5 0 0 1 .5-.5z"></path>
                    <path d="M7.646 11.854a.5.5 0 0 0 .708 0l3-3a.5.5 0 0 0-.708-.708L8.5 10.293V1.5a.5.5 0 0 0-1 0v8.793L5.354 8.146a.5.5 0 1 0-.708.708l3 3z"></path>
                </svg>
                Download
            </button>
        </a>
        @*<a href="@downloadLink">Download Link</a>*@
    </div>
}

@code {
    private bool isLoading = false;
    private bool isUploaded = false;
    private string downloadLink = "";

    protected override void OnInitialized()
    {
        base.OnInitialized();
    }

    private async void OnFileUpload(InputFileChangeEventArgs args)
    {
        isLoading = true;
        Console.WriteLine("lul");
        var file = args.File;
        Console.WriteLine(file.Name);
        using (var stream = file.OpenReadStream())
        {
            var resourceId = Guid.NewGuid();
            
            var fileTransferUtility = new TransferUtility(
                Environment.GetEnvironmentVariable("AWS_ACCESS_KEY_ID"),
                Environment.GetEnvironmentVariable("AWS_SECRET_ACCESS_KEY"),
                RegionEndpoint.EUCentral1
            );
            await fileTransferUtility.UploadAsync(stream, "wojtus", $"{resourceId}/{file.Name}");
            Console.WriteLine("done");
            var url = fileTransferUtility.S3Client.GetPreSignedURL(new GetPreSignedUrlRequest
                {
                    BucketName = "wojtus",
                    Key = $"{resourceId}/{file.Name}",
                    Expires = DateTime.Now.AddHours(24)
                });
            downloadLink = url;
        }
        isLoading = false;
        isUploaded = true;
        await _jsRuntime.InvokeVoidAsync("navigator.clipboard.writeText", downloadLink);
        StateHasChanged();
    }
}
